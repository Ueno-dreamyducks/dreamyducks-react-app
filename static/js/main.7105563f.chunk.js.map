{"version":3,"sources":["images/dd_Icon_removed_background.png","images/BBLogo_TransparentBackground.png","components/Header.js","datas/Projects.js","components/pages/HomepageMain/HomepageMain.js","datas/PolyatomicList.js","components/pages/ElementQuickLearn/EQL.js","components/pages/NoPageFound/NoPageFound.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","navigate","useNavigate","handleClick","link","React","createElement","className","onClick","ProjectList","name","redirect","image","BBLogo","HomepageMain","exploreCardList","map","project","ExploreCard","Card","props","src","ddLogo","PolyatomicList","formula","typeFormula","EQL","shuffledQuestions","setShuffledQuestions","useState","isFormulaToName","setIsNameToFormula","question","setQuestion","answer","setAnswer","element","setElement","questionIndex","setQuestionIndex","answerInput","setAnswerInput","time","setTime","setInterval","score","setScore","maxScore","setMaxScore","isHintUsed","setIsHintUsed","isGameOver","setIsGameOver","cardItems","item","ElementCard","requestRef","useRef","previousTimeRef","animate","timeStamp","current","deltaTime","prevTime","toFixed","requestAnimationFrame","useEffect","cancelAnimationFrame","console","log","list","shuffleArray","onSubmitClick","length","setNextQuestion","prevIndex","newIndex","_shuffledQuestions$ne","_shuffledQuestions$ne2","_shuffledQuestions$ne3","_shuffledQuestions$ne4","onSwitchGameMode","prevState","newState","type","placeholder","value","onChange","e","target","onKeyDown","event","key","onHintClick","firstThreeChars","substring","ResetGame","array","i","j","Math","floor","random","temp","NoPageFound","App","Routes","basename","Route","index","path","reportWebVitals","onPerfEntry","Function","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","HashRouter"],"mappings":"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","file":"static/js/main.7105563f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dd_Icon_removed_background.fe097f6e.png\";","module.exports = __webpack_public_path__ + \"static/media/BBLogo_TransparentBackground.24e9c71e.png\";","import './Header.css'\r\nimport React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction Header() {\r\n    const navigate = useNavigate()\r\n\r\n    const handleClick = (link) => {\r\n        navigate(link);  \r\n    }\r\n\r\n    return(\r\n        <div className=\"Header\">\r\n            <p className='noto-sans-normal' onClick={() => handleClick('/')}>dreamyducks</p>\r\n            {/* Float right will make below items to be aligned right to left */}\r\n            <button onClick={() => handleClick('/projects/EQL')}>Click here to【EQL】</button>\r\n             <a className='noto-sans-normal' onClick={() => handleClick('/about')}>About</a>\r\n             <a className='noto-sans-normal' onClick={() => handleClick('/projects')}>Projects</a>\r\n             <a className='noto-sans-normal' onClick= {() => handleClick('/projects/EQL')}>Element Quick Learn</a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import BBLogo from  '../images/BBLogo_TransparentBackground.png';\r\n\r\nconst ProjectList = [\r\n    {name: \"BloomBoard\", redirect: \"/\", image: BBLogo},\r\n    {name: \"EQL\", redirect: \"/projects/EQL\"}\r\n]\r\n\r\nexport default ProjectList;","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Header from '../../Header.js'\r\nimport './HomepageMain.css';\r\nimport ddLogo from '../../../images/dd_Icon_removed_background.png';\r\nimport ProjectList from '../../../datas/Projects.js';\r\n\r\nfunction HomepageMain() {\r\n    const navigate = useNavigate();\r\n\r\n    const handleClick = (link) => {\r\n        navigate(link);  \r\n    }\r\n\r\n    const exploreCardList = ProjectList.map(project =>\r\n        <ExploreCard name={project.name} onClick={() => handleClick(project.redirect)} image={project.image} />\r\n    );\r\n\r\n    return(\r\n        <div className=\"HomepageMain\">\r\n            <div className='HomepageMainBody'>\r\n                <Header />\r\n                <div className=\"LogoContainer\">\r\n                    <p className=\"nunito-normal\">dreamyducks</p>\r\n                </div>\r\n                <div className='ProjectsContainer'>\r\n                    <Card name=\"BloomBoard\" />\r\n                    <Card name=\"EQL\" onClick={() => handleClick('/projects/EQL')}/>\r\n                </div>\r\n                <div className='ExploreContainer'>\r\n                    {exploreCardList}\r\n                </div>\r\n            </div>  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomepageMain;\r\n\r\nfunction Card(props) {\r\n    return(\r\n        <div className='Card' onClick={props.onClick}>\r\n            <img src={ddLogo}></img>\r\n            <p>{props.name}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction ExploreCard(props) {\r\n    return(\r\n        <div className='ExploreCard' onClick={props.onClick}>\r\n            <div className='contents' >\r\n                <img src={props.image} />\r\n                <p>{props.name}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}","const PolyatomicList = [\r\n    {name: \"Nitrite\", formula: \"NO₂-¹\", typeFormula: \"NO2-1\"},\r\n    {name: \"Nitrate\", formula: \"NO₃-¹\", typeFormula: \"NO3-1\"},\r\n    {name: \"Hydroxide\", formula: \"OH-¹\", typeFormula: \"OH-1\"},\r\n    {name: \"Hypochlorite\", formula: \"ClO-¹\", typeFormula: \"ClO-1\"},\r\n    {name: \"Chlorite\", formula: \"ClO₂-¹\", typeFormula: \"ClO2-1\"},\r\n    {name: \"Cyanide\", formula: \"CN-¹\", typeFormula: \"CN-1\"},\r\n    {name: \"Permanganate\", formula: \"MnO₄-¹\", typeFormula: \"MnO4-1\"},\r\n    {name: \"Acetate\", formula: \"C₂H₃O₂-¹\", typeFormula: \"C2H3O2-1\"},\r\n    {name: \"Chlorate\", formula: \"ClO₃-¹\", typeFormula: \"ClO3-1\"},\r\n    {name: \"Perchlorate\", formula: \"ClO₄-¹\", typeFormula: \"ClO4-1\"},\r\n    {name: \"Sulfite\", formula: \"SO₃⁻²\", typeFormula: \"SO3-2\"},\r\n    {name: \"Sulfate\", formula: \"SO₄⁻²\", typeFormula: \"SO4-2\"},\r\n    {name: \"Carbonate\", formula: \"CO₃⁻²\", typeFormula: \"CO3-2\"},\r\n    {name: \"Phosphite\", formula: \"PO₃⁻³\", typeFormula: \"PO3-3\"},\r\n    {name: \"Phosphate\", formula: \"PO₄⁻³\", typeFormula: \"PO4-3\"},\r\n    {name: \"Ammonium\", formula: \"NH₄⁺¹\", typeFormula: \"NH4+1\"}\r\n]\r\n\r\nexport default PolyatomicList;","import Header from '../../Header';\r\nimport PolyatomicList from '../../../datas/PolyatomicList';\r\nimport './EQL.css';\r\nimport React, { useState, useEffect, useRef } from 'react';\r\n\r\nfunction EQL() {\r\n    const [shuffledQuestions, setShuffledQuestions] = useState([]);\r\n    const [isFormulaToName, setIsNameToFormula] = useState(true)\r\n    const [question, setQuestion] = useState(\"\");\r\n    const [answer, setAnswer] = useState(\"\");\r\n    const [element, setElement] = useState(null);\r\n    const [questionIndex, setQuestionIndex] = useState(0);\r\n    const [answerInput, setAnswerInput] = useState(\"\");\r\n    const [time, setTime] = setInterval = useState(0);\r\n    const [score, setScore] = useState(0);\r\n    const [maxScore, setMaxScore] = useState(0);\r\n    const [isHintUsed, setIsHintUsed] = useState(false);\r\n    const [isGameOver, setIsGameOver] = useState(false);\r\n    const cardItems = PolyatomicList.map(item =>\r\n        <ElementCard name={item.name} formula={item.formula}/>\r\n    );\r\n\r\n    const requestRef = useRef();\r\n    const previousTimeRef = useRef();\r\n\r\n    const animate = timeStamp => {\r\n        if(!previousTimeRef.current) {\r\n            previousTimeRef.current = timeStamp;\r\n        }\r\n        const deltaTime = (timeStamp - previousTimeRef.current) /1000; //conver to second\r\n\r\n        if(!isGameOver && deltaTime >= 0.1) {\r\n            setTime(prevTime => +(prevTime + deltaTime).toFixed(1));\r\n            previousTimeRef.current = timeStamp;\r\n        } \r\n\r\n        requestRef.current = requestAnimationFrame(animate);\r\n    }; \r\n\r\n    useEffect(() => { \r\n            requestRef.current = requestAnimationFrame(animate);\r\n            return () => cancelAnimationFrame(requestRef.current); \r\n    }, [isGameOver]); \r\n    \r\n    useEffect(() => {\r\n        console.log(\"Initialize\");\r\n        const list = shuffleArray([...PolyatomicList]);\r\n        setShuffledQuestions(list);\r\n        \r\n        setQuestionIndex(0);\r\n        setElement(list[0]);\r\n\r\n        if(isFormulaToName) {\r\n            setQuestion(list[0].formula)\r\n            setAnswer(list[0].name)\r\n        } else {\r\n            setQuestion(list[0].name)\r\n            setAnswer(list[0].typeFormula)\r\n        }\r\n    }, []);\r\n    \r\n    \r\n\r\n    const onSwitchGameMode = () => {\r\n        setIsNameToFormula(prevState => {\r\n            let newState = !prevState\r\n\r\n            const list = shuffleArray([...PolyatomicList]);\r\n            setShuffledQuestions(list);\r\n            setElement(list[0]);\r\n\r\n            if(newState) {\r\n                setQuestion(list[0].formula)\r\n                setAnswer(list[0].name)\r\n            } else {\r\n                setQuestion(list[0].name);\r\n                setAnswer(list[0].typeFormula)\r\n            }\r\n            return newState;\r\n        });\r\n\r\n        \r\n        setQuestionIndex(0);\r\n\r\n        setAnswerInput(\"\")\r\n        setIsHintUsed(false)\r\n        setIsGameOver(false)\r\n        setScore(0)\r\n        setMaxScore(0)\r\n    }\r\n\r\n    const onAnswerChange = (e) => {\r\n        setAnswerInput(e.target.value);\r\n    }\r\n\r\n    const onHintClick = () => {\r\n        console.log(\"length of shuffledquestions:\" + shuffledQuestions.length);\r\n\r\n        let firstThreeChars = answer.substring(0, 2);\r\n        if(isHintUsed) {\r\n            if(!isGameOver) {\r\n            setMaxScore(maxScore + 10);\r\n\r\n            if(questionIndex < shuffledQuestions.length -1) {\r\n                setNextQuestion();\r\n            } else { //End of game\r\n                setIsGameOver(true);\r\n            }}\r\n        } else {\r\n            setAnswerInput(firstThreeChars);\r\n            setIsHintUsed(true);\r\n        }\r\n    }\r\n\r\n    const handleKeyPress = (event) => {\r\n        if (event.key === 'Enter') {\r\n          onSubmitClick();\r\n        }\r\n      };\r\n\r\n    const onSubmitClick = () => {\r\n        console.log(\"type formula:\" + element.typeFormula);\r\n        console.log(\"Answer input \" + answerInput);\r\n        if(answerInput === answer) {\r\n            if(!isGameOver) {\r\n            console.log(\"answer is correct\");\r\n            if(isHintUsed) {\r\n                setScore(score + 5)\r\n;            } else {\r\n                setScore(score + 10);\r\n            }\r\n            setMaxScore(maxScore + 10);\r\n\r\n            if(questionIndex < shuffledQuestions.length -1) {\r\n                setNextQuestion();\r\n            } else { //End of game\r\n                setIsGameOver(true);\r\n            }}\r\n        }\r\n    }\r\n\r\n    const setNextQuestion = () => {\r\n        setIsHintUsed(false);\r\n        setAnswerInput(\"\");\r\n        setQuestionIndex(prevIndex => {\r\n          const newIndex = prevIndex + 1;\r\n          setElement(shuffledQuestions[newIndex]);\r\n          if(isFormulaToName) {\r\n            setQuestion(shuffledQuestions[newIndex]?.formula)\r\n            setAnswer(shuffledQuestions[newIndex]?.name)\r\n          } else {\r\n            setQuestion(shuffledQuestions[newIndex]?.name);\r\n            setAnswer(shuffledQuestions[newIndex]?.typeFormula);\r\n          }\r\n          return newIndex;\r\n        });\r\n        console.log(\"new question setted\");\r\n        console.log(\"index\" + questionIndex);\r\n      }\r\n\r\n      const ResetGame = () => {\r\n        const list = shuffleArray([...PolyatomicList]);\r\n        setShuffledQuestions(list);\r\n        setElement(list[0]);\r\n\r\n        if(isFormulaToName) {\r\n            setQuestion(list[0].formula)\r\n            setAnswer(list[0].name)\r\n        } else {\r\n            setQuestion(list[0].name);\r\n            setAnswer(list[0].typeFormula)\r\n        }\r\n        setQuestionIndex(0);\r\n\r\n        setAnswerInput(\"\")\r\n        setIsHintUsed(false)\r\n        setIsGameOver(false)\r\n        setScore(0)\r\n        setMaxScore(0)\r\n        setTime(0);\r\n        previousTimeRef.current = null;\r\n      }\r\n\r\n    return(\r\n        <div className=\"EQL\">\r\n            <Header />\r\n            <div className='EQLBody'>\r\n                <h1>Element Quick Learn</h1>\r\n                <div onClick={onSwitchGameMode} className='PlaySelector'>\r\n                    <p>Formula</p>\r\n                    <p>to</p>\r\n                    <p>Name</p>\r\n                </div>\r\n                <div className='PlayDisplay'>\r\n                    <p className='timer'>Time: {time}</p>\r\n                    <p className='score'>Score: {score}/{maxScore}</p>\r\n                    <h2 className='question'>{question}</h2>\r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder='Type answer'\r\n                        value={answerInput}\r\n                        onChange={onAnswerChange}\r\n                        onKeyDown={handleKeyPress}\r\n                        className='AnswerInput'>\r\n                    </input>\r\n\r\n                    <div className='ControlButtons'>\r\n                        <button onClick={onHintClick} className='HintButton'>{isHintUsed ? \"Skip\" : \"Hint\"}</button>\r\n                        <button onClick={onSubmitClick} className='SubmitButton'>Guess</button>\r\n                    </div>\r\n                </div>\r\n                <div className={`gameOverDisplay ${isGameOver ? '' : 'hidden'}`}>\r\n                    <p>Score: {score}</p>\r\n                    <button onClick={ResetGame}>Play Again</button>\r\n                </div>\r\n                <div className='BottomSection'>\r\n                    <div className='DataTableHeading'>\r\n                        <h4>All Datas</h4>\r\n                    </div>\r\n                    <div className='DataTable'>\r\n                        {cardItems}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EQL;\r\n\r\nfunction shuffleArray(array) {\r\n    for (var i = array.length - 1; i > 0; i--) {\r\n \r\n        // Generate random number \r\n        var j = Math.floor(Math.random() * (i + 1));\r\n\r\n        var temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nfunction ElementCard(props) {\r\n    return(\r\n        <div className='ElementCard'>\r\n            <p>{props.name}</p>\r\n            <p>{props.formula}</p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nfunction NoPageFound() {\r\n    return(\r\n        <div className='NoPageFound'>\r\n            <h1>No Page found</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoPageFound;","import React from 'react';\nimport './App.css';\nimport { Routes, Route } from 'react-router-dom';\nimport HomepageMain from './components/pages/HomepageMain/HomepageMain.js';\nimport EQL from './components/pages/ElementQuickLearn/EQL.js';\nimport NoPageFound from './components/pages/NoPageFound/NoPageFound.js';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Routes basename='/dreamyducks-react-app'>\n            <Route index element={<HomepageMain  />} />\n            <Route path=\"projects\" element={<HomepageMain />} />\n            <Route path=\"projects/eql\" element={<EQL />} />\n            <Route path=\"*\" element={<NoPageFound />} />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}